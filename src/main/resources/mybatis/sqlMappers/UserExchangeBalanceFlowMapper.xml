<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.clt.core.mapper.UserExchangeBalanceFlowMapper">
  <resultMap id="BaseResultMap" type="cn.clt.core.entity.UserExchangeBalanceFlow">
    <id column="id" jdbcType="VARCHAR" property="id" />
    <result column="user_id" jdbcType="VARCHAR" property="userId" />
    <result column="comment_balance_before" jdbcType="INTEGER" property="commentBalanceBefore" />
    <result column="comment_balance_after" jdbcType="INTEGER" property="commentBalanceAfter" />
    <result column="fans_balance_before" jdbcType="INTEGER" property="fansBalanceBefore" />
    <result column="fans_balance_after" jdbcType="INTEGER" property="fansBalanceAfter" />
    <result column="browse_balance_before" jdbcType="INTEGER" property="browseBalanceBefore" />
    <result column="browse_balance_after" jdbcType="INTEGER" property="browseBalanceAfter" />
    <result column="exchange_cout_before" jdbcType="INTEGER" property="exchangeCoutBefore" />
    <result column="exchange_count_after" jdbcType="INTEGER" property="exchangeCountAfter" />
    <result column="fabulous_balance_before" jdbcType="INTEGER" property="fabulousBalanceBefore" />
    <result column="fabulous_balance_after" jdbcType="INTEGER" property="fabulousBalanceAfter" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="modify_time" jdbcType="TIMESTAMP" property="modifyTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, user_id, comment_balance_before, comment_balance_after, fans_balance_before, 
    fans_balance_after, browse_balance_before, browse_balance_after, exchange_cout_before, 
    exchange_count_after, fabulous_balance_before, fabulous_balance_after, status, create_time, 
    modify_time
  </sql>
  <select id="selectByExample" parameterType="cn.clt.core.entity.UserExchangeBalanceFlowExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from user_exchange_balance_flow
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from user_exchange_balance_flow
    where id = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from user_exchange_balance_flow
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="cn.clt.core.entity.UserExchangeBalanceFlowExample">
    delete from user_exchange_balance_flow
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.clt.core.entity.UserExchangeBalanceFlow">
    insert into user_exchange_balance_flow (id, user_id, comment_balance_before, 
      comment_balance_after, fans_balance_before, 
      fans_balance_after, browse_balance_before, 
      browse_balance_after, exchange_cout_before, 
      exchange_count_after, fabulous_balance_before, 
      fabulous_balance_after, status, create_time, 
      modify_time)
    values (#{id,jdbcType=VARCHAR}, #{userId,jdbcType=VARCHAR}, #{commentBalanceBefore,jdbcType=INTEGER}, 
      #{commentBalanceAfter,jdbcType=INTEGER}, #{fansBalanceBefore,jdbcType=INTEGER}, 
      #{fansBalanceAfter,jdbcType=INTEGER}, #{browseBalanceBefore,jdbcType=INTEGER}, 
      #{browseBalanceAfter,jdbcType=INTEGER}, #{exchangeCoutBefore,jdbcType=INTEGER}, 
      #{exchangeCountAfter,jdbcType=INTEGER}, #{fabulousBalanceBefore,jdbcType=INTEGER}, 
      #{fabulousBalanceAfter,jdbcType=INTEGER}, #{status,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, 
      #{modifyTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="cn.clt.core.entity.UserExchangeBalanceFlow">
    insert into user_exchange_balance_flow
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="commentBalanceBefore != null">
        comment_balance_before,
      </if>
      <if test="commentBalanceAfter != null">
        comment_balance_after,
      </if>
      <if test="fansBalanceBefore != null">
        fans_balance_before,
      </if>
      <if test="fansBalanceAfter != null">
        fans_balance_after,
      </if>
      <if test="browseBalanceBefore != null">
        browse_balance_before,
      </if>
      <if test="browseBalanceAfter != null">
        browse_balance_after,
      </if>
      <if test="exchangeCoutBefore != null">
        exchange_cout_before,
      </if>
      <if test="exchangeCountAfter != null">
        exchange_count_after,
      </if>
      <if test="fabulousBalanceBefore != null">
        fabulous_balance_before,
      </if>
      <if test="fabulousBalanceAfter != null">
        fabulous_balance_after,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="modifyTime != null">
        modify_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=VARCHAR},
      </if>
      <if test="commentBalanceBefore != null">
        #{commentBalanceBefore,jdbcType=INTEGER},
      </if>
      <if test="commentBalanceAfter != null">
        #{commentBalanceAfter,jdbcType=INTEGER},
      </if>
      <if test="fansBalanceBefore != null">
        #{fansBalanceBefore,jdbcType=INTEGER},
      </if>
      <if test="fansBalanceAfter != null">
        #{fansBalanceAfter,jdbcType=INTEGER},
      </if>
      <if test="browseBalanceBefore != null">
        #{browseBalanceBefore,jdbcType=INTEGER},
      </if>
      <if test="browseBalanceAfter != null">
        #{browseBalanceAfter,jdbcType=INTEGER},
      </if>
      <if test="exchangeCoutBefore != null">
        #{exchangeCoutBefore,jdbcType=INTEGER},
      </if>
      <if test="exchangeCountAfter != null">
        #{exchangeCountAfter,jdbcType=INTEGER},
      </if>
      <if test="fabulousBalanceBefore != null">
        #{fabulousBalanceBefore,jdbcType=INTEGER},
      </if>
      <if test="fabulousBalanceAfter != null">
        #{fabulousBalanceAfter,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="modifyTime != null">
        #{modifyTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.clt.core.entity.UserExchangeBalanceFlowExample" resultType="java.lang.Long">
    select count(*) from user_exchange_balance_flow
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update user_exchange_balance_flow
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=VARCHAR},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=VARCHAR},
      </if>
      <if test="record.commentBalanceBefore != null">
        comment_balance_before = #{record.commentBalanceBefore,jdbcType=INTEGER},
      </if>
      <if test="record.commentBalanceAfter != null">
        comment_balance_after = #{record.commentBalanceAfter,jdbcType=INTEGER},
      </if>
      <if test="record.fansBalanceBefore != null">
        fans_balance_before = #{record.fansBalanceBefore,jdbcType=INTEGER},
      </if>
      <if test="record.fansBalanceAfter != null">
        fans_balance_after = #{record.fansBalanceAfter,jdbcType=INTEGER},
      </if>
      <if test="record.browseBalanceBefore != null">
        browse_balance_before = #{record.browseBalanceBefore,jdbcType=INTEGER},
      </if>
      <if test="record.browseBalanceAfter != null">
        browse_balance_after = #{record.browseBalanceAfter,jdbcType=INTEGER},
      </if>
      <if test="record.exchangeCoutBefore != null">
        exchange_cout_before = #{record.exchangeCoutBefore,jdbcType=INTEGER},
      </if>
      <if test="record.exchangeCountAfter != null">
        exchange_count_after = #{record.exchangeCountAfter,jdbcType=INTEGER},
      </if>
      <if test="record.fabulousBalanceBefore != null">
        fabulous_balance_before = #{record.fabulousBalanceBefore,jdbcType=INTEGER},
      </if>
      <if test="record.fabulousBalanceAfter != null">
        fabulous_balance_after = #{record.fabulousBalanceAfter,jdbcType=INTEGER},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.modifyTime != null">
        modify_time = #{record.modifyTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update user_exchange_balance_flow
    set id = #{record.id,jdbcType=VARCHAR},
      user_id = #{record.userId,jdbcType=VARCHAR},
      comment_balance_before = #{record.commentBalanceBefore,jdbcType=INTEGER},
      comment_balance_after = #{record.commentBalanceAfter,jdbcType=INTEGER},
      fans_balance_before = #{record.fansBalanceBefore,jdbcType=INTEGER},
      fans_balance_after = #{record.fansBalanceAfter,jdbcType=INTEGER},
      browse_balance_before = #{record.browseBalanceBefore,jdbcType=INTEGER},
      browse_balance_after = #{record.browseBalanceAfter,jdbcType=INTEGER},
      exchange_cout_before = #{record.exchangeCoutBefore,jdbcType=INTEGER},
      exchange_count_after = #{record.exchangeCountAfter,jdbcType=INTEGER},
      fabulous_balance_before = #{record.fabulousBalanceBefore,jdbcType=INTEGER},
      fabulous_balance_after = #{record.fabulousBalanceAfter,jdbcType=INTEGER},
      status = #{record.status,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      modify_time = #{record.modifyTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.clt.core.entity.UserExchangeBalanceFlow">
    update user_exchange_balance_flow
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=VARCHAR},
      </if>
      <if test="commentBalanceBefore != null">
        comment_balance_before = #{commentBalanceBefore,jdbcType=INTEGER},
      </if>
      <if test="commentBalanceAfter != null">
        comment_balance_after = #{commentBalanceAfter,jdbcType=INTEGER},
      </if>
      <if test="fansBalanceBefore != null">
        fans_balance_before = #{fansBalanceBefore,jdbcType=INTEGER},
      </if>
      <if test="fansBalanceAfter != null">
        fans_balance_after = #{fansBalanceAfter,jdbcType=INTEGER},
      </if>
      <if test="browseBalanceBefore != null">
        browse_balance_before = #{browseBalanceBefore,jdbcType=INTEGER},
      </if>
      <if test="browseBalanceAfter != null">
        browse_balance_after = #{browseBalanceAfter,jdbcType=INTEGER},
      </if>
      <if test="exchangeCoutBefore != null">
        exchange_cout_before = #{exchangeCoutBefore,jdbcType=INTEGER},
      </if>
      <if test="exchangeCountAfter != null">
        exchange_count_after = #{exchangeCountAfter,jdbcType=INTEGER},
      </if>
      <if test="fabulousBalanceBefore != null">
        fabulous_balance_before = #{fabulousBalanceBefore,jdbcType=INTEGER},
      </if>
      <if test="fabulousBalanceAfter != null">
        fabulous_balance_after = #{fabulousBalanceAfter,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="modifyTime != null">
        modify_time = #{modifyTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.clt.core.entity.UserExchangeBalanceFlow">
    update user_exchange_balance_flow
    set user_id = #{userId,jdbcType=VARCHAR},
      comment_balance_before = #{commentBalanceBefore,jdbcType=INTEGER},
      comment_balance_after = #{commentBalanceAfter,jdbcType=INTEGER},
      fans_balance_before = #{fansBalanceBefore,jdbcType=INTEGER},
      fans_balance_after = #{fansBalanceAfter,jdbcType=INTEGER},
      browse_balance_before = #{browseBalanceBefore,jdbcType=INTEGER},
      browse_balance_after = #{browseBalanceAfter,jdbcType=INTEGER},
      exchange_cout_before = #{exchangeCoutBefore,jdbcType=INTEGER},
      exchange_count_after = #{exchangeCountAfter,jdbcType=INTEGER},
      fabulous_balance_before = #{fabulousBalanceBefore,jdbcType=INTEGER},
      fabulous_balance_after = #{fabulousBalanceAfter,jdbcType=INTEGER},
      status = #{status,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      modify_time = #{modifyTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=VARCHAR}
  </update>
</mapper>